-- 1. Make a database for a company 
CREATE DATABASE company;
USE company;

-- 2. Make an employee table in the company database. 
CREATE TABLE employee(
id INT PRIMARY KEY,
name VARCHAR(50),
age INT,
department VARCHAR(50),
city VARCHAR(50),
salary INT
);

-- 3. Fill details in the table
INSERT INTO employee(id, name, age, department, city, salary)
VALUES
(1,"Rahul", 25, "IT","Mumbai",1500),
(2,"Afsara",26,"HR","Pune",2000),
(3,"Abhimanyu",27,"IT","Mumbai",2500),
(4,"Aditya",25,"Marketing","Surat",2400),
(5, "Raj",24,"Finance","Indore",1500);

-- 4. See all the data
Select * FROM employee;
 
SELECT city, COUNT(name) AS no_of_emp
FROM employee
GROUP BY city;

SELECT city, MAX(salary) AS max_Salary
FROM employee
GROUP BY city
ORDER BY max_Salary DESC;

SELECT department, COUNT(id) AS totalemp
FROM employee
GROUP BY department
ORDER BY totalemp DESC;

SELECT department, AVG(salary) AS avgsalary
FROM employee
GROUP BY department
HAVING avgsalary>1200;

SELECT * FROM employee;

-- emp salary>min-salary

USE company;

-- min salary
SELECT MIN(salary)
FROM employee;

-- sal>min_salary
SELECT name, salary
FROM employee
WHERE salary> (SELECT MIN(salary)
FROM employee);

-- age=min_age

-- min_age
SELECT MIN(age) FROM employee;     

-- age=min_age
SELECT name, age
FROM employee
WHERE age=(SELECT MIN(age) FROM employee);

-- min age
SELECT MIN(age) AS min_age
FROM employee;

-- all the emp age>min_Age
SELECT name,age
FROM employee, (SELECT MIN(age) AS min_age
FROM employee) AS min_age_query
WHERE age>min_age_query.min_age; 
  
SELECT emp.name,emp.age -- provided employee with another name as 'emp'
FROM employee emp, (SELECT MIN(age) AS min_age
FROM employee) AS min_age_query
WHERE emp.age>min_age_query.min_age;   

-- avg age
SELECT AVG(age) FROM employee;

-- age avg age

SELECT age, AVG(age) -- will show ERROR
FROM employee; 

SELECT age, AVG(age) AS avg_age -- will show ERROR
FROM employee; 

SELECT age, (SELECT AVG(age) FROM employee) AS avg_age
FROM employee;  

-- 4TH HIGHEST SALARY

SELECT DISTINCT salary -- To avoid duplicate salary values and take distinct values.
FROM employee
ORDER BY salary DESC;

SELECT DISTINCT salary -- To avoid duplicate salary values and take distinct values.
FROM employee
ORDER BY salary DESC
LIMIT 3,1; -- n-1=4-1=3 

SELECT * FROM employee;

CREATE VIEW employeeView AS
SELECT id, name, city FROM employee;

SELECT id FROM employeeView;

-- AS is used to provide results in new column category(IF & CASE Statement).
-- If u use IF then time complexity will be lesser than CASE so if time complexity is very less so the queries run very faster but when u use the CASE the time complexity is a bit more than IF so the queries take time to run.
